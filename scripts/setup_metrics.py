#!/usr/bin/env python3
"""
Script para configurar las tablas de m√©tricas en la base de datos
"""

import asyncio
import asyncpg
import sys
import os
from pathlib import Path

# Agregar el directorio padre al path
sys.path.append(str(Path(__file__).parent.parent))

from config.settings import settings


async def setup_metrics_tables():
    """Crear tablas de m√©tricas en la base de datos"""
    
    print("üöÄ Configurando tablas de m√©tricas...")
    
    try:
        # Conectar a la base de datos
        conn = await asyncpg.connect(settings.DATABASE_URL)
        
        # Leer el script SQL
        sql_file = Path(__file__).parent / "create_metrics_tables.sql"
        with open(sql_file, 'r', encoding='utf-8') as f:
            sql_script = f.read()
        
        # Ejecutar el script
        print("üìù Creando tablas de m√©tricas...")
        await conn.execute(sql_script)
        
        print("‚úÖ Tablas de m√©tricas creadas exitosamente")
        
        # Verificar que las tablas se crearon
        tables = await conn.fetch("""
            SELECT tablename FROM pg_tables 
            WHERE schemaname = 'public' 
            AND tablename IN (
                'conversations', 
                'conversation_messages', 
                'metrics_hourly',
                'metrics_daily',
                'popular_topics',
                'metric_events',
                'tool_metrics'
            )
        """)
        
        print(f"\nüìä Tablas creadas ({len(tables)}):")
        for table in tables:
            print(f"  - {table['tablename']}")
        
        # Verificar funciones
        functions = await conn.fetch("""
            SELECT proname FROM pg_proc 
            WHERE pronamespace = 'public'::regnamespace
            AND proname IN (
                'cleanup_old_metrics_data',
                'aggregate_hourly_metrics',
                'aggregate_daily_metrics'
            )
        """)
        
        print(f"\n‚öôÔ∏è Funciones creadas ({len(functions)}):")
        for func in functions:
            print(f"  - {func['proname']}()")
        
        # Verificar vistas
        views = await conn.fetch("""
            SELECT viewname FROM pg_views 
            WHERE schemaname = 'public' 
            AND viewname = 'dashboard_stats'
        """)
        
        if views:
            print(f"\nüëÅÔ∏è Vistas creadas:")
            for view in views:
                print(f"  - {view['viewname']}")
        
        # Cerrar conexi√≥n
        await conn.close()
        
        print("\n‚úÖ Configuraci√≥n de m√©tricas completada exitosamente")
        print("\nüìå Notas importantes:")
        print("  - Las conversaciones se eliminan autom√°ticamente despu√©s de 30 d√≠as")
        print("  - Los mensajes detallados se eliminan despu√©s de 7 d√≠as")
        print("  - Las m√©tricas agregadas se mantienen permanentemente")
        print("  - El scheduler de limpieza se ejecuta autom√°ticamente a las 3 AM")
        
        return True
        
    except FileNotFoundError:
        print(f"‚ùå Error: No se encontr√≥ el archivo SQL: {sql_file}")
        return False
        
    except Exception as e:
        print(f"‚ùå Error configurando m√©tricas: {e}")
        return False


async def test_metrics_service():
    """Probar el servicio de m√©tricas"""
    
    print("\nüß™ Probando servicio de m√©tricas...")
    
    try:
        from services.metrics_service import MetricsService
        
        # Crear instancia del servicio
        metrics = MetricsService(settings.DATABASE_URL)
        await metrics.initialize()
        
        # Crear una conversaci√≥n de prueba
        print("üìù Creando conversaci√≥n de prueba...")
        conversation_id = await metrics.start_conversation(
            user_id="test_user_123",
            platform="wordpress",
            channel_details={"test": True}
        )
        print(f"  Conversaci√≥n creada: {conversation_id}")
        
        # Registrar algunos mensajes
        print("üí¨ Registrando mensajes...")
        await metrics.track_message(
            conversation_id=conversation_id,
            sender_type="user",
            content="¬øCu√°l es el precio del producto ABC?",
            intent="product_inquiry"
        )
        
        await asyncio.sleep(0.1)  # Simular delay
        
        await metrics.track_message(
            conversation_id=conversation_id,
            sender_type="bot",
            content="El producto ABC cuesta 25‚Ç¨",
            response_time_ms=150
        )
        
        # Registrar un tema popular
        await metrics.track_topic(
            topic="product_inquiry",
            category="chat",
            query="precio producto",
            resolution_time_minutes=0.5,
            success=True
        )
        
        # Finalizar conversaci√≥n
        await metrics.end_conversation(
            conversation_id=conversation_id,
            status="ended",
            user_satisfaction=5
        )
        
        print("‚úÖ Conversaci√≥n de prueba completada")
        
        # Obtener estad√≠sticas
        print("\nüìä Obteniendo estad√≠sticas...")
        stats = await metrics.get_dashboard_stats()
        
        print(f"  Conversaciones hoy: {stats['today']['conversations']}")
        print(f"  Usuarios √∫nicos: {stats['today']['unique_users']}")
        print(f"  Plataformas: {stats['platforms']}")
        
        # Cerrar servicio
        await metrics.close()
        
        print("\n‚úÖ Prueba del servicio completada exitosamente")
        
    except Exception as e:
        print(f"‚ùå Error probando servicio: {e}")


async def main():
    """Funci√≥n principal"""
    
    # Configurar tablas
    success = await setup_metrics_tables()
    
    if success:
        # Probar el servicio
        await test_metrics_service()
    
    print("\nüéâ Script completado")


if __name__ == "__main__":
    asyncio.run(main())