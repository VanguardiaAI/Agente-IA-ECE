#!/usr/bin/env python3
"""
Script de configuraci√≥n para Fase 1: Sistema de B√∫squeda H√≠brida
Configura PostgreSQL con pgvector y crea la base de datos inicial
"""

import asyncio
import sys
import os
from pathlib import Path

# Agregar el directorio ra√≠z al path
sys.path.append(str(Path(__file__).parent.parent))

from services.database import db_service
from services.conversation_logger import conversation_logger
from services.embedding_service import embedding_service
from config.settings import settings
import logging

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def check_dependencies():
    """Verificar que todas las dependencias est√©n instaladas"""
    print("üîç Verificando dependencias...")
    
    try:
        import asyncpg
        print("‚úÖ asyncpg instalado")
    except ImportError:
        print("‚ùå asyncpg no instalado. Ejecuta: pip install asyncpg")
        return False
    
    try:
        import openai
        print("‚úÖ openai instalado")
    except ImportError:
        print("‚ùå openai no instalado. Ejecuta: pip install openai")
        return False
    
    try:
        import numpy
        print("‚úÖ numpy instalado")
    except ImportError:
        print("‚ùå numpy no instalado. Ejecuta: pip install numpy")
        return False
    
    return True

async def check_environment():
    """Verificar variables de entorno necesarias"""
    print("\nüîß Verificando configuraci√≥n...")
    
    required_vars = [
        'POSTGRES_HOST',
        'POSTGRES_PORT',
        'POSTGRES_DB',
        'POSTGRES_USER',
        'POSTGRES_PASSWORD',
        'OPENAI_API_KEY'
    ]
    
    missing_vars = []
    for var in required_vars:
        if not hasattr(settings, var) or not getattr(settings, var, None):
            missing_vars.append(var)
    
    if missing_vars:
        print(f"‚ùå Variables de entorno faltantes: {', '.join(missing_vars)}")
        print("üìù Configura estas variables en tu archivo .env")
        return False
    
    print("‚úÖ Variables de entorno configuradas")
    return True

async def test_postgresql_connection():
    """Probar conexi√≥n a PostgreSQL"""
    print("\nüêò Probando conexi√≥n a PostgreSQL...")
    
    try:
        import asyncpg
        conn = await asyncpg.connect(settings.DATABASE_URL)
        
        # Verificar extensi√≥n vector
        result = await conn.fetchval("SELECT EXISTS(SELECT 1 FROM pg_extension WHERE extname = 'vector')")
        if not result:
            print("‚ö†Ô∏è  Extensi√≥n pgvector no encontrada. Intentando instalar...")
            try:
                await conn.execute("CREATE EXTENSION IF NOT EXISTS vector;")
                print("‚úÖ Extensi√≥n pgvector instalada")
            except Exception as e:
                print(f"‚ùå Error instalando pgvector: {e}")
                print("üìù Instala pgvector manualmente: https://github.com/pgvector/pgvector")
                await conn.close()
                return False
        else:
            print("‚úÖ Extensi√≥n pgvector disponible")
        
        await conn.close()
        print("‚úÖ Conexi√≥n a PostgreSQL exitosa")
        return True
        
    except Exception as e:
        print(f"‚ùå Error conectando a PostgreSQL: {e}")
        print("üìù Verifica que PostgreSQL est√© corriendo y las credenciales sean correctas")
        return False

async def test_openai_connection():
    """Probar conexi√≥n a OpenAI"""
    print("\nü§ñ Probando conexi√≥n a OpenAI...")
    
    try:
        success = await embedding_service.test_connection()
        if success:
            print("‚úÖ Conexi√≥n a OpenAI exitosa")
            return True
        else:
            print("‚ùå Error conectando a OpenAI")
            return False
    except Exception as e:
        print(f"‚ùå Error probando OpenAI: {e}")
        print("üìù Verifica tu OPENAI_API_KEY")
        return False

async def initialize_database():
    """Inicializar base de datos y esquemas"""
    print("\nüèóÔ∏è  Inicializando base de datos...")
    
    try:
        # Inicializar servicio principal
        await db_service.initialize()
        print("‚úÖ Servicio de base de datos h√≠brida inicializado")
        
        # Inicializar logger de conversaciones
        await conversation_logger.initialize()
        print("‚úÖ Logger de conversaciones inicializado")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error inicializando base de datos: {e}")
        return False

async def create_sample_data():
    """Crear datos de ejemplo para probar el sistema"""
    print("\nüìù Creando datos de ejemplo...")
    
    try:
        # Informaci√≥n de empresa de ejemplo
        company_info = [
            {
                "title": "Pol√≠tica de Devoluciones",
                "content": "Aceptamos devoluciones dentro de 30 d√≠as de la compra. Los productos deben estar en su estado original. Los gastos de env√≠o de devoluci√≥n corren por cuenta del cliente excepto en casos de productos defectuosos.",
                "category": "politicas"
            },
            {
                "title": "Horarios de Atenci√≥n",
                "content": "Nuestro horario de atenci√≥n al cliente es de lunes a viernes de 9:00 AM a 6:00 PM, y s√°bados de 9:00 AM a 2:00 PM. Estamos cerrados los domingos y d√≠as festivos.",
                "category": "atencion"
            },
            {
                "title": "M√©todos de Pago",
                "content": "Aceptamos tarjetas de cr√©dito (Visa, MasterCard, American Express), transferencias bancarias, y pagos en efectivo en nuestra tienda f√≠sica. Tambi√©n ofrecemos financiamiento para compras mayores a $500.",
                "category": "pagos"
            },
            {
                "title": "Instalaci√≥n de Productos El√©ctricos",
                "content": "Ofrecemos servicio de instalaci√≥n profesional para productos el√©ctricos complejos. Nuestros t√©cnicos certificados pueden instalar paneles el√©ctricos, sistemas de iluminaci√≥n, y motores industriales. El costo de instalaci√≥n se cotiza por separado.",
                "category": "servicios"
            },
            {
                "title": "Garant√≠as de Productos",
                "content": "Todos nuestros productos el√©ctricos vienen con garant√≠a del fabricante. Los cables y conectores tienen 1 a√±o de garant√≠a, los motores 2 a√±os, y los paneles el√©ctricos 3 a√±os. Cubrimos defectos de fabricaci√≥n y fallas prematuras.",
                "category": "garantias"
            }
        ]
        
        # Insertar informaci√≥n de empresa
        for info in company_info:
            embedding = await embedding_service.generate_company_info_embedding(info)
            await db_service.insert_knowledge(
                content_type="company_info",
                title=info["title"],
                content=info["content"],
                embedding=embedding,
                metadata={"category": info["category"]}
            )
        
        print(f"‚úÖ Insertados {len(company_info)} registros de informaci√≥n de empresa")
        
        # Verificar estad√≠sticas
        stats = await db_service.get_statistics()
        print(f"üìä Estad√≠sticas de la base de conocimiento:")
        print(f"   - Total de entradas: {stats.get('total_entries', 0)}")
        print(f"   - Entradas activas: {stats.get('active_entries', 0)}")
        print(f"   - Tipos de contenido: {stats.get('content_types', 0)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error creando datos de ejemplo: {e}")
        return False

async def test_hybrid_search():
    """Probar b√∫squeda h√≠brida"""
    print("\nüîç Probando b√∫squeda h√≠brida...")
    
    try:
        # Probar b√∫squeda
        query = "pol√≠tica de devoluciones"
        query_embedding = await embedding_service.generate_embedding(query)
        
        results = await db_service.hybrid_search(
            query_text=query,
            query_embedding=query_embedding,
            limit=3
        )
        
        print(f"‚úÖ B√∫squeda h√≠brida exitosa - {len(results)} resultados encontrados")
        
        if results:
            print("üìã Resultados de ejemplo:")
            for i, result in enumerate(results[:2], 1):
                print(f"   {i}. {result['title']}")
                print(f"      Tipo: {result['content_type']}")
                print(f"      Puntuaci√≥n: {result.get('rrf_score', 0):.4f}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error probando b√∫squeda h√≠brida: {e}")
        return False

async def cleanup():
    """Limpiar conexiones"""
    try:
        await db_service.close()
        await conversation_logger.close()
        print("‚úÖ Conexiones cerradas correctamente")
    except:
        pass

async def main():
    """Funci√≥n principal de configuraci√≥n"""
    print("üöÄ CONFIGURACI√ìN FASE 1: Sistema de B√∫squeda H√≠brida")
    print("=" * 60)
    
    try:
        # Verificar dependencias
        if not await check_dependencies():
            return False
        
        # Verificar configuraci√≥n
        if not await check_environment():
            return False
        
        # Probar conexiones
        if not await test_postgresql_connection():
            return False
        
        if not await test_openai_connection():
            return False
        
        # Inicializar base de datos
        if not await initialize_database():
            return False
        
        # Crear datos de ejemplo
        if not await create_sample_data():
            return False
        
        # Probar b√∫squeda
        if not await test_hybrid_search():
            return False
        
        print("\nüéâ FASE 1 CONFIGURADA EXITOSAMENTE")
        print("=" * 60)
        print("‚úÖ PostgreSQL con pgvector configurado")
        print("‚úÖ OpenAI embeddings funcionando")
        print("‚úÖ Base de conocimiento inicializada")
        print("‚úÖ B√∫squeda h√≠brida operativa")
        print("\nüìã Pr√≥ximos pasos:")
        print("   1. Ejecutar sincronizaci√≥n de productos WooCommerce")
        print("   2. Configurar webhooks en WooCommerce")
        print("   3. Integrar herramientas de b√∫squeda en FastMCP")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå Error durante la configuraci√≥n: {e}")
        return False
    
    finally:
        await cleanup()

if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1) 