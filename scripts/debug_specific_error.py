#!/usr/bin/env python3
"""
Script para debuggear la l√≠nea espec√≠fica del error
"""

import asyncio
import sys
import os
from datetime import datetime

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from services.woocommerce import WooCommerceService
from services.database import db_service

async def debug_specific_error():
    """Debug espec√≠fico de la l√≠nea que causa el error"""
    print("üîç DEBUG ESPEC√çFICO DEL ERROR")
    print("=" * 60)
    
    # 1. Obtener un producto de WooCommerce
    wc_service = WooCommerceService()
    products = await wc_service.get_products(per_page=1)
    
    if not products:
        print("‚ùå No se pudieron obtener productos")
        return
    
    product = products[0]
    print(f"üì¶ Producto obtenido: {product.get('id')} - {product.get('name', 'Sin nombre')[:50]}...")
    
    # 2. Simular el c√≥digo que falla l√≠nea por l√≠nea
    print(f"\nüîß Simulando c√≥digo que falla...")
    
    try:
        # L√≠nea que funciona
        product_id = product.get('id')
        print(f"   ‚úÖ product_id: {product_id} (tipo: {type(product_id)})")
        
        # L√≠nea que funciona
        external_id = f"product_{product_id}"
        print(f"   ‚úÖ external_id: {external_id} (tipo: {type(external_id)})")
        
        # L√≠nea que puede fallar - verificar si ya existe
        print(f"   üîç Verificando si existe en base de datos...")
        existing = await db_service.get_knowledge_by_external_id(external_id)
        print(f"   üìä existing: {type(existing)}")
        
        if existing:
            print(f"   üìä Contenido de existing: {existing}")
            print(f"   üîç Intentando existing.get('updated_at')...")
            
            # Esta es la l√≠nea que puede estar fallando
            db_modified = existing.get('updated_at')
            print(f"   ‚úÖ db_modified: {db_modified} (tipo: {type(db_modified)})")
        else:
            print(f"   ‚ÑπÔ∏è No existe en base de datos")
        
        # L√≠nea que puede fallar - fecha de modificaci√≥n
        print(f"   üîç Procesando fecha de modificaci√≥n...")
        date_modified_raw = product.get('date_modified', '')
        print(f"   üìä date_modified_raw: '{date_modified_raw}' (tipo: {type(date_modified_raw)})")
        
        if date_modified_raw:
            # Esta l√≠nea puede estar fallando
            date_modified_processed = date_modified_raw.replace('Z', '+00:00')
            print(f"   ‚úÖ date_modified_processed: '{date_modified_processed}' (tipo: {type(date_modified_processed)})")
            
            # Esta l√≠nea tambi√©n puede fallar
            wc_modified = datetime.fromisoformat(date_modified_processed)
            print(f"   ‚úÖ wc_modified: {wc_modified} (tipo: {type(wc_modified)})")
        else:
            print(f"   ‚ö†Ô∏è date_modified est√° vac√≠o")
        
    except Exception as e:
        print(f"   ‚ùå Error en l√≠nea espec√≠fica: {e}")
        import traceback
        traceback.print_exc()
    
    # 3. Probar el m√©todo _format_product_for_knowledge directamente
    print(f"\nüé® Probando _format_product_for_knowledge...")
    
    try:
        from services.woocommerce_sync import WooCommerceSyncService
        sync_service = WooCommerceSyncService()
        
        product_content = sync_service._format_product_for_knowledge(product)
        print(f"   ‚úÖ product_content generado correctamente")
        print(f"   üìä Tipo: {type(product_content)}")
        print(f"   üìä Keys: {list(product_content.keys())}")
        
    except Exception as e:
        print(f"   ‚ùå Error en _format_product_for_knowledge: {e}")
        import traceback
        traceback.print_exc()

async def main():
    """Funci√≥n principal"""
    await debug_specific_error()

if __name__ == "__main__":
    asyncio.run(main()) 