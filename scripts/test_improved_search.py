#!/usr/bin/env python3
"""
Script para probar la b√∫squeda mejorada con priorizaci√≥n de coincidencias exactas
"""

import asyncio
import sys
from pathlib import Path
import json
from typing import List, Dict, Any

# A√±adir el directorio padre al path
sys.path.append(str(Path(__file__).parent.parent))

from services.database import db_service
from services.embedding_service import embedding_service
from config.settings import HYBRID_SEARCH_CONFIG

class SearchTester:
    def __init__(self):
        self.test_results = []
        
    async def test_search(self, query: str, expected_terms: List[str] = None):
        """Probar una b√∫squeda espec√≠fica"""
        print(f"\nüîç Probando b√∫squeda: '{query}'")
        print("-" * 60)
        
        # Generar embedding para la consulta
        embedding = await embedding_service.generate_embedding(query)
        
        # Realizar b√∫squeda h√≠brida
        results = await db_service.hybrid_search(
            query_text=query,
            query_embedding=embedding,
            content_types=["product"],
            limit=5
        )
        
        print(f"üìä Encontrados: {len(results)} productos")
        
        # Verificar t√©rminos t√©cnicos detectados
        technical_terms = db_service._extract_technical_terms(query)
        print(f"üîß T√©rminos t√©cnicos detectados: {technical_terms}")
        
        # An√°lisis de resultados
        exact_matches = 0
        partial_matches = 0
        
        for i, result in enumerate(results, 1):
            title = result.get('title', 'Producto')
            metadata = result.get('metadata', {})
            score = result.get('rrf_score', 0)
            exact_boost = result.get('exact_match_boost', 0)
            
            print(f"\n{i}. {title}")
            print(f"   Score total: {score:.4f}")
            print(f"   Boost exacto: {exact_boost:.1f}")
            
            # Verificar coincidencias esperadas
            if expected_terms:
                matches = []
                for term in expected_terms:
                    if term.upper() in title.upper():
                        matches.append(f"‚úÖ '{term}' en t√≠tulo")
                        exact_matches += 1
                    elif result.get('content') and term.upper() in result['content'].upper():
                        matches.append(f"üìù '{term}' en descripci√≥n")
                        partial_matches += 1
                    else:
                        matches.append(f"‚ùå '{term}' no encontrado")
                
                if matches:
                    print(f"   Coincidencias: {', '.join(matches)}")
            
            print(f"   üí∞ Precio: {metadata.get('price', 'N/A')}‚Ç¨")
            print(f"   Stock: {'‚úÖ Disponible' if metadata.get('stock_status') == 'instock' else '‚ùå Sin stock'}")
        
        # Resumen
        print(f"\nüìà Resumen:")
        print(f"   - Coincidencias exactas en t√≠tulo: {exact_matches}")
        print(f"   - Coincidencias en descripci√≥n: {partial_matches}")
        
        return {
            'query': query,
            'results_count': len(results),
            'technical_terms': technical_terms,
            'exact_matches': exact_matches,
            'partial_matches': partial_matches
        }
    
    async def run_all_tests(self):
        """Ejecutar todos los casos de prueba"""
        print("\n" + "="*70)
        print("üß™ PRUEBAS DE B√öSQUEDA MEJORADA CON COINCIDENCIAS EXACTAS")
        print("="*70)
        
        # Inicializar servicios
        await db_service.initialize()
        await embedding_service.initialize()
        
        # Casos de prueba para t√©rminos t√©cnicos espec√≠ficos
        test_cases = [
            {
                'query': 'diferencial DPN',
                'expected': ['DPN'],
                'description': 'B√∫squeda de diferencial con c√≥digo DPN espec√≠fico'
            },
            {
                'query': 'magnetot√©rmico C60N',
                'expected': ['C60N'],
                'description': 'B√∫squeda de magnetot√©rmico modelo C60N'
            },
            {
                'query': 'cable H07V-K 2.5mm',
                'expected': ['H07V-K', '2.5mm'],
                'description': 'B√∫squeda de cable con especificaci√≥n t√©cnica'
            },
            {
                'query': 'luminaria LED IP65 50W',
                'expected': ['LED', 'IP65', '50W'],
                'description': 'B√∫squeda con m√∫ltiples especificaciones t√©cnicas'
            },
            {
                'query': 'contactor LC1D12',
                'expected': ['LC1D12'],
                'description': 'B√∫squeda de contactor con modelo espec√≠fico'
            },
            {
                'query': 'diferencial tipo A 30mA',
                'expected': ['30mA'],
                'description': 'B√∫squeda con especificaci√≥n de sensibilidad'
            }
        ]
        
        print(f"\nüìã Ejecutando {len(test_cases)} casos de prueba...")
        
        for test_case in test_cases:
            print(f"\n{'='*70}")
            print(f"üìù {test_case['description']}")
            
            result = await self.test_search(
                test_case['query'], 
                test_case.get('expected', [])
            )
            self.test_results.append(result)
        
        # Pruebas de b√∫squedas generales (sin t√©rminos t√©cnicos espec√≠ficos)
        print(f"\n{'='*70}")
        print("üîç PRUEBAS DE B√öSQUEDAS GENERALES")
        print("="*70)
        
        general_queries = [
            "iluminaci√≥n exterior",
            "material el√©ctrico industrial",
            "automatizaci√≥n vivienda",
            "protecci√≥n sobretensiones"
        ]
        
        for query in general_queries:
            result = await self.test_search(query)
            self.test_results.append(result)
        
        # Mostrar resumen final
        self.show_summary()
    
    def show_summary(self):
        """Mostrar resumen de todas las pruebas"""
        print("\n" + "="*70)
        print("üìä RESUMEN DE PRUEBAS")
        print("="*70)
        
        total_tests = len(self.test_results)
        successful_tests = sum(1 for r in self.test_results if r['results_count'] > 0)
        
        print(f"\n‚úÖ Pruebas ejecutadas: {total_tests}")
        print(f"‚úÖ Pruebas con resultados: {successful_tests}")
        print(f"‚ùå Pruebas sin resultados: {total_tests - successful_tests}")
        
        # Mostrar configuraci√≥n actual
        print(f"\n‚öôÔ∏è Configuraci√≥n de b√∫squeda:")
        print(f"   - Peso vectorial: {HYBRID_SEARCH_CONFIG['vector_weight']}")
        print(f"   - Peso texto: {HYBRID_SEARCH_CONFIG['text_weight']}")
        print(f"   - Boost t√≠tulo exacto: {HYBRID_SEARCH_CONFIG.get('exact_match_title_boost', 0)}")
        print(f"   - Boost descripci√≥n exacta: {HYBRID_SEARCH_CONFIG.get('exact_match_desc_boost', 0)}")
        print(f"   - Boost parcial: {HYBRID_SEARCH_CONFIG.get('partial_match_boost', 0)}")
        
        print("\n‚ú® Mejoras implementadas:")
        print("   ‚úÖ Detecci√≥n autom√°tica de t√©rminos t√©cnicos")
        print("   ‚úÖ Priorizaci√≥n de coincidencias exactas en t√≠tulo")
        print("   ‚úÖ Boost secundario para coincidencias en descripci√≥n")
        print("   ‚úÖ Mantiene capacidad de b√∫squeda sem√°ntica")

async def main():
    tester = SearchTester()
    try:
        await tester.run_all_tests()
    except Exception as e:
        print(f"\n‚ùå Error durante las pruebas: {e}")
        import traceback
        traceback.print_exc()
    finally:
        await db_service.close()

if __name__ == "__main__":
    asyncio.run(main())