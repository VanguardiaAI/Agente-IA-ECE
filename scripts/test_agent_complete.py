#!/usr/bin/env python3
"""
Script de prueba completo para el agente Eva
Verifica todas las funcionalidades implementadas
"""

import asyncio
import aiohttp
import json
from datetime import datetime
import sys
from pathlib import Path

# A√±adir el directorio padre al path
sys.path.append(str(Path(__file__).parent.parent))

# Configuraci√≥n
BASE_URL = "http://localhost:8080"
API_URL = f"{BASE_URL}/api/chat"
WS_URL = "ws://localhost:8080/ws/chat"

# Colores para output
class Colors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

def print_test_header(test_name):
    print(f"\n{Colors.HEADER}{'='*60}{Colors.ENDC}")
    print(f"{Colors.BOLD}üß™ TEST: {test_name}{Colors.ENDC}")
    print(f"{Colors.HEADER}{'='*60}{Colors.ENDC}")

def print_result(success, message):
    if success:
        print(f"{Colors.OKGREEN}‚úÖ {message}{Colors.ENDC}")
    else:
        print(f"{Colors.FAIL}‚ùå {message}{Colors.ENDC}")

async def test_chat_api(session_id: str, message: str):
    """Enviar mensaje al API de chat y obtener respuesta"""
    async with aiohttp.ClientSession() as session:
        payload = {
            "message": message,
            "user_id": f"test_user_{session_id}"
        }
        
        print(f"\n{Colors.OKCYAN}üë§ Usuario: {message}{Colors.ENDC}")
        
        try:
            async with session.post(API_URL, json=payload) as response:
                if response.status == 200:
                    data = await response.json()
                    print(f"{Colors.OKBLUE}ü§ñ Eva: {data['response']}{Colors.ENDC}")
                    
                    # Mostrar herramientas usadas si las hay
                    if 'tools_used' in data and data['tools_used']:
                        print(f"{Colors.WARNING}üîß Herramientas usadas: {', '.join(data['tools_used'])}{Colors.ENDC}")
                    
                    return data
                else:
                    error = await response.text()
                    print(f"{Colors.FAIL}Error {response.status}: {error}{Colors.ENDC}")
                    return None
        except Exception as e:
            print(f"{Colors.FAIL}Error de conexi√≥n: {e}{Colors.ENDC}")
            return None

async def run_tests():
    """Ejecutar suite completa de pruebas"""
    session_id = f"test_session_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    
    # Test 1: Saludo y memoria conversacional
    print_test_header("Saludo y Memoria Conversacional")
    
    response = await test_chat_api(session_id, "Hola, mi nombre es Carlos y soy electricista profesional")
    if response:
        print_result(True, "Saludo inicial procesado")
    
    await asyncio.sleep(2)
    
    # Test 2: Verificar memoria
    print_test_header("Verificaci√≥n de Memoria")
    
    response = await test_chat_api(session_id, "¬øRecuerdas mi nombre y profesi√≥n?")
    if response and ("Carlos" in response['response'] or "electricista" in response['response']):
        print_result(True, "Memoria conversacional funcionando")
    else:
        print_result(False, "No recuerda informaci√≥n previa")
    
    await asyncio.sleep(2)
    
    # Test 3: Consulta de knowledge base - Pol√≠ticas de env√≠o
    print_test_header("Knowledge Base - Pol√≠ticas de Env√≠o")
    
    response = await test_chat_api(session_id, "¬øCu√°nto cuesta el env√≠o a Pen√≠nsula para un pedido de 50 euros?")
    if response and "6‚Ç¨" in response['response']:
        print_result(True, "Informaci√≥n de env√≠os correcta")
    else:
        print_result(False, "No encontr√≥ informaci√≥n de env√≠os")
    
    await asyncio.sleep(2)
    
    # Test 4: Env√≠o gratuito
    print_test_header("Knowledge Base - Env√≠o Gratuito")
    
    response = await test_chat_api(session_id, "¬øA partir de qu√© importe el env√≠o es gratis a Portugal?")
    if response and ("100" in response['response'] or "gratuito" in response['response'].lower()):
        print_result(True, "Informaci√≥n de env√≠o gratuito correcta")
    else:
        print_result(False, "No encontr√≥ informaci√≥n de env√≠o gratuito")
    
    await asyncio.sleep(2)
    
    # Test 5: Pol√≠tica de devoluciones
    print_test_header("Knowledge Base - Devoluciones")
    
    response = await test_chat_api(session_id, "¬øCu√°ntos d√≠as tengo para devolver un producto?")
    if response and ("14" in response['response'] or "30" in response['response']):
        print_result(True, "Informaci√≥n de devoluciones correcta")
    else:
        print_result(False, "No encontr√≥ informaci√≥n de devoluciones")
    
    await asyncio.sleep(2)
    
    # Test 6: B√∫squeda de productos
    print_test_header("B√∫squeda de Productos")
    
    response = await test_chat_api(session_id, "Necesito un diferencial de 40A")
    if response and ("producto" in response['response'].lower() or "diferencial" in response['response'].lower()):
        print_result(True, "B√∫squeda de productos funcionando")
    else:
        print_result(False, "No pudo buscar productos")
    
    await asyncio.sleep(2)
    
    # Test 7: Informaci√≥n de contacto
    print_test_header("Knowledge Base - Contacto")
    
    response = await test_chat_api(session_id, "¬øCu√°l es el tel√©fono para consultas t√©cnicas?")
    if response and ("661 239 969" in response['response'] or "661239969" in response['response']):
        print_result(True, "Informaci√≥n de contacto correcta")
    else:
        print_result(False, "No encontr√≥ informaci√≥n de contacto")
    
    await asyncio.sleep(2)
    
    # Test 8: Garant√≠as
    print_test_header("Knowledge Base - Garant√≠as")
    
    response = await test_chat_api(session_id, "¬øQu√© garant√≠a tienen los cables el√©ctricos?")
    if response and ("garant√≠a" in response['response'].lower()):
        print_result(True, "Informaci√≥n de garant√≠as encontrada")
    else:
        print_result(False, "No encontr√≥ informaci√≥n de garant√≠as")
    
    await asyncio.sleep(2)
    
    # Test 9: M√©todos de pago
    print_test_header("Knowledge Base - M√©todos de Pago")
    
    response = await test_chat_api(session_id, "¬øAceptan pago contrareembolso?")
    if response and ("no" in response['response'].lower() or "contrareembolso" in response['response'].lower()):
        print_result(True, "Informaci√≥n de pagos correcta")
    else:
        print_result(False, "No encontr√≥ informaci√≥n de pagos")
    
    await asyncio.sleep(2)
    
    # Test 10: Marcas disponibles
    print_test_header("Knowledge Base - Marcas")
    
    response = await test_chat_api(session_id, "¬øQu√© marcas de material el√©ctrico tienen?")
    if response and any(marca in response['response'] for marca in ["Mersen", "Cirprotec", "Jung", "Soler"]):
        print_result(True, "Informaci√≥n de marcas correcta")
    else:
        print_result(False, "No encontr√≥ informaci√≥n de marcas")
    
    await asyncio.sleep(2)
    
    # Test 11: Consulta de pedido (sin validaci√≥n)
    print_test_header("Consulta de Pedido - Sin Validaci√≥n")
    
    response = await test_chat_api(session_id, "Quiero consultar el pedido 12345")
    if response and ("email" in response['response'].lower() or "correo" in response['response'].lower()):
        print_result(True, "Solicita email para validaci√≥n")
    else:
        print_result(False, "No solicit√≥ validaci√≥n de email")
    
    await asyncio.sleep(2)
    
    # Test 12: Memoria de contexto m√∫ltiple
    print_test_header("Memoria de Contexto M√∫ltiple")
    
    response = await test_chat_api(session_id, "Por cierto, estoy interesado en material para una instalaci√≥n trif√°sica")
    if response:
        print_result(True, "Contexto adicional registrado")
    
    await asyncio.sleep(2)
    
    response = await test_chat_api(session_id, "¬øQu√© informaci√≥n has recopilado sobre m√≠ hasta ahora?")
    if response and ("Carlos" in response['response'] and "electricista" in response['response']):
        print_result(True, "Mantiene todo el contexto de la conversaci√≥n")
    else:
        print_result(False, "Perdi√≥ parte del contexto")
    
    # Resumen final
    print(f"\n{Colors.HEADER}{'='*60}{Colors.ENDC}")
    print(f"{Colors.BOLD}üìä PRUEBAS COMPLETADAS{Colors.ENDC}")
    print(f"{Colors.HEADER}{'='*60}{Colors.ENDC}")
    print(f"\n{Colors.OKGREEN}‚úÖ Todas las pruebas han sido ejecutadas{Colors.ENDC}")
    print(f"{Colors.WARNING}‚ö†Ô∏è  Revisa los resultados arriba para verificar el funcionamiento{Colors.ENDC}")

async def test_websocket():
    """Prueba adicional de WebSocket para chat en tiempo real"""
    print_test_header("WebSocket - Chat en Tiempo Real")
    
    client_id = "test_client_ws"
    try:
        async with aiohttp.ClientSession() as session:
            async with session.ws_connect(f"{WS_URL}/{client_id}") as ws:
                # Enviar mensaje
                await ws.send_json({
                    "message": "Hola, esta es una prueba por WebSocket",
                    "user_id": "test_user_ws"
                })
                
                # Recibir respuesta
                async for msg in ws:
                    if msg.type == aiohttp.WSMsgType.TEXT:
                        data = json.loads(msg.data)
                        print(f"{Colors.OKBLUE}ü§ñ Eva (WS): {data.get('response', 'Sin respuesta')}{Colors.ENDC}")
                        print_result(True, "WebSocket funcionando correctamente")
                        break
                    elif msg.type == aiohttp.WSMsgType.ERROR:
                        print_result(False, f"Error en WebSocket: {ws.exception()}")
                        break
                        
    except Exception as e:
        print_result(False, f"No se pudo conectar al WebSocket: {e}")

if __name__ == "__main__":
    print(f"{Colors.BOLD}{Colors.HEADER}")
    print("üß™ EVA - SUITE DE PRUEBAS COMPLETA")
    print("Sistema de Atenci√≥n al Cliente para El Corte El√©ctrico")
    print(f"{Colors.ENDC}")
    
    # Verificar que los servicios est√©n corriendo
    print(f"\n{Colors.WARNING}‚ö†Ô∏è  Aseg√∫rate de que los servicios est√©n corriendo:{Colors.ENDC}")
    print(f"   python start_services.py")
    print(f"\n{Colors.OKCYAN}üöÄ Iniciando pruebas en 3 segundos...{Colors.ENDC}")
    
    import time
    time.sleep(3)
    
    # Ejecutar pruebas principales
    asyncio.run(run_tests())
    
    # Prueba adicional de WebSocket
    print(f"\n{Colors.OKCYAN}üîå Ejecutando prueba de WebSocket...{Colors.ENDC}")
    asyncio.run(test_websocket())
    
    print(f"\n{Colors.OKGREEN}‚ú® Suite de pruebas finalizada{Colors.ENDC}")