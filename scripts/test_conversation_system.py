#!/usr/bin/env python3
"""
Script de prueba para el sistema de gesti√≥n de conversaciones
Verifica que todas las funcionalidades est√©n operativas
"""

import asyncio
import aiohttp
import json
from datetime import datetime, timedelta
import sys
import os

# Agregar el directorio ra√≠z al path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from config.settings import settings

# Configuraci√≥n
API_BASE_URL = "http://localhost:8080"
API_KEY = os.getenv("ADMIN_API_KEY", "admin_test_key")

async def test_conversation_list():
    """Probar listado de conversaciones"""
    print("\nüîç Probando listado de conversaciones...")
    
    async with aiohttp.ClientSession() as session:
        headers = {"Authorization": f"Bearer {API_KEY}"}
        
        # Listar conversaciones
        async with session.get(f"{API_BASE_URL}/api/admin/conversations", headers=headers) as resp:
            if resp.status == 200:
                data = await resp.json()
                print(f"‚úÖ Conversaciones encontradas: {len(data.get('conversations', []))}")
                
                # Mostrar primeras 3 conversaciones
                for conv in data.get('conversations', [])[:3]:
                    print(f"  - {conv['conversation_id']} | {conv['platform']} | {conv['messages_count']} mensajes")
                
                return data.get('conversations', [])
            else:
                print(f"‚ùå Error al listar conversaciones: {resp.status}")
                return []

async def test_conversation_search():
    """Probar b√∫squeda de conversaciones"""
    print("\nüîç Probando b√∫squeda de conversaciones...")
    
    async with aiohttp.ClientSession() as session:
        headers = {"Authorization": f"Bearer {API_KEY}"}
        
        # Buscar por plataforma
        params = {"platform": "wordpress"}
        async with session.get(
            f"{API_BASE_URL}/api/admin/conversations/search", 
            headers=headers,
            params=params
        ) as resp:
            if resp.status == 200:
                data = await resp.json()
                print(f"‚úÖ Conversaciones de WordPress: {len(data.get('conversations', []))}")
            else:
                print(f"‚ùå Error en b√∫squeda: {resp.status}")
        
        # Buscar por fecha (√∫ltimos 7 d√≠as)
        date_from = (datetime.now() - timedelta(days=7)).isoformat()
        params = {"date_from": date_from}
        async with session.get(
            f"{API_BASE_URL}/api/admin/conversations/search", 
            headers=headers,
            params=params
        ) as resp:
            if resp.status == 200:
                data = await resp.json()
                print(f"‚úÖ Conversaciones √∫ltimos 7 d√≠as: {len(data.get('conversations', []))}")
            else:
                print(f"‚ùå Error en b√∫squeda por fecha: {resp.status}")

async def test_conversation_details(conversation_id):
    """Probar detalles de conversaci√≥n"""
    print(f"\nüîç Probando detalles de conversaci√≥n {conversation_id}...")
    
    async with aiohttp.ClientSession() as session:
        headers = {"Authorization": f"Bearer {API_KEY}"}
        
        async with session.get(
            f"{API_BASE_URL}/api/admin/conversations/{conversation_id}/messages", 
            headers=headers
        ) as resp:
            if resp.status == 200:
                data = await resp.json()
                conv = data.get('conversation', {})
                messages = data.get('messages', [])
                
                print(f"‚úÖ Conversaci√≥n encontrada:")
                print(f"  - Usuario: {conv.get('user_id')}")
                print(f"  - Plataforma: {conv.get('platform')}")
                print(f"  - Mensajes: {len(messages)}")
                print(f"  - Duraci√≥n: {conv.get('duration_minutes', 0):.1f} minutos")
                
                # Mostrar primeros 3 mensajes
                print("\n  Primeros mensajes:")
                for msg in messages[:3]:
                    sender = "üë§ Usuario" if msg['sender_type'] == 'user' else "ü§ñ Eva"
                    content = msg['content'][:50] + "..." if len(msg['content']) > 50 else msg['content']
                    print(f"    {sender}: {content}")
                
                return True
            elif resp.status == 404:
                print(f"‚ö†Ô∏è Conversaci√≥n no encontrada")
                return False
            else:
                print(f"‚ùå Error al obtener detalles: {resp.status}")
                return False

async def create_test_conversation():
    """Crear una conversaci√≥n de prueba"""
    print("\nüîß Creando conversaci√≥n de prueba...")
    
    async with aiohttp.ClientSession() as session:
        # Simular mensaje de chat
        chat_data = {
            "message": "Hola, necesito informaci√≥n sobre un producto",
            "user_id": "test_user_" + datetime.now().strftime("%Y%m%d%H%M%S"),
            "platform": "wordpress"
        }
        
        async with session.post(
            f"{API_BASE_URL}/api/chat", 
            json=chat_data
        ) as resp:
            if resp.status == 200:
                data = await resp.json()
                print(f"‚úÖ Conversaci√≥n creada: {data.get('conversation_id')}")
                return data.get('conversation_id')
            else:
                print(f"‚ùå Error al crear conversaci√≥n: {resp.status}")
                return None

async def test_metrics_integration():
    """Probar integraci√≥n con m√©tricas"""
    print("\nüìä Probando integraci√≥n con m√©tricas...")
    
    async with aiohttp.ClientSession() as session:
        headers = {"Authorization": f"Bearer {API_KEY}"}
        
        async with session.get(f"{API_BASE_URL}/api/admin/metrics/summary", headers=headers) as resp:
            if resp.status == 200:
                data = await resp.json()
                metrics = data.get('metrics', {})
                
                print("‚úÖ M√©tricas obtenidas:")
                if 'today' in metrics:
                    print(f"  - Conversaciones hoy: {metrics['today'].get('conversations', 0)}")
                    print(f"  - Usuarios √∫nicos hoy: {metrics['today'].get('unique_users', 0)}")
                
                if 'platforms' in metrics:
                    print(f"  - Por plataforma: {metrics['platforms']}")
                
                return True
            else:
                print(f"‚ùå Error al obtener m√©tricas: {resp.status}")
                return False

async def main():
    """Ejecutar todas las pruebas"""
    print("=" * 60)
    print("üß™ PRUEBA DEL SISTEMA DE GESTI√ìN DE CONVERSACIONES")
    print("=" * 60)
    
    try:
        # 1. Probar listado
        conversations = await test_conversation_list()
        
        # 2. Probar b√∫squeda
        await test_conversation_search()
        
        # 3. Probar detalles (si hay conversaciones)
        if conversations:
            await test_conversation_details(conversations[0]['conversation_id'])
        else:
            print("\n‚ö†Ô∏è No hay conversaciones para probar detalles")
            # Crear una de prueba
            conv_id = await create_test_conversation()
            if conv_id:
                await asyncio.sleep(2)  # Esperar a que se procese
                await test_conversation_details(conv_id)
        
        # 4. Probar m√©tricas
        await test_metrics_integration()
        
        print("\n‚úÖ Pruebas completadas exitosamente")
        
    except Exception as e:
        print(f"\n‚ùå Error durante las pruebas: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main())