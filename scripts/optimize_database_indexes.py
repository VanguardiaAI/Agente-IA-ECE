#!/usr/bin/env python
"""
Script para optimizar los √≠ndices de la base de datos PostgreSQL
para mejorar el rendimiento de las b√∫squedas
"""
import asyncio
import asyncpg
import os
from dotenv import load_dotenv

# Cargar variables de entorno
load_dotenv()
load_dotenv('env.agent')

async def optimize_indexes():
    """Crea y optimiza √≠ndices para mejorar el rendimiento de b√∫squedas"""
    
    # Configuraci√≥n de conexi√≥n
    db_config = {
        'host': os.getenv('POSTGRES_HOST', 'localhost'),
        'port': int(os.getenv('POSTGRES_PORT', '5432')),
        'database': os.getenv('POSTGRES_DB', 'eva_knowledge'),
        'user': os.getenv('POSTGRES_USER', 'eva_user'),
        'password': os.getenv('POSTGRES_PASSWORD', 'eva_pass')
    }
    
    try:
        # Conectar a la base de datos
        conn = await asyncpg.connect(**db_config)
        print("‚úÖ Conectado a PostgreSQL")
        
        # Lista de √≠ndices a crear
        indexes = [
            # √çndice GIN para b√∫squeda de texto con trigramas (m√°s r√°pido para LIKE)
            {
                'name': 'idx_products_title_trgm',
                'sql': """
                    CREATE INDEX IF NOT EXISTS idx_products_title_trgm 
                    ON knowledge_base USING gin(title gin_trgm_ops)
                    WHERE content_type = 'product'
                """,
                'description': '√çndice GIN para b√∫squeda r√°pida en t√≠tulos de productos'
            },
            
            # √çndice GIN para b√∫squeda en contenido
            {
                'name': 'idx_products_content_trgm',
                'sql': """
                    CREATE INDEX IF NOT EXISTS idx_products_content_trgm 
                    ON knowledge_base USING gin(content gin_trgm_ops)
                    WHERE content_type = 'product'
                """,
                'description': '√çndice GIN para b√∫squeda r√°pida en contenido de productos'
            },
            
            # √çndice para b√∫squeda vectorial optimizada
            {
                'name': 'idx_products_embedding_ivfflat',
                'sql': """
                    CREATE INDEX IF NOT EXISTS idx_products_embedding_ivfflat 
                    ON knowledge_base USING ivfflat (embedding vector_cosine_ops) WITH (lists = 100)
                    WHERE content_type = 'product'
                """,
                'description': '√çndice IVFFlat para b√∫squeda vectorial optimizada'
            },
            
            # √çndice compuesto para filtrado por tipo y external_id
            {
                'name': 'idx_kb_type_external',
                'sql': """
                    CREATE INDEX IF NOT EXISTS idx_kb_type_external 
                    ON knowledge_base(content_type, external_id)
                """,
                'description': '√çndice compuesto para b√∫squedas por tipo y ID externo'
            },
            
            # √çndice para metadata JSONB
            {
                'name': 'idx_kb_metadata_gin',
                'sql': """
                    CREATE INDEX IF NOT EXISTS idx_kb_metadata_gin 
                    ON knowledge_base USING gin(metadata)
                """,
                'description': '√çndice GIN para b√∫squeda r√°pida en metadata JSON'
            },
            
            # √çndice parcial para productos en stock
            {
                'name': 'idx_products_instock',
                'sql': """
                    CREATE INDEX IF NOT EXISTS idx_products_instock 
                    ON knowledge_base(external_id) 
                    WHERE content_type = 'product' 
                    AND (metadata->>'stock_status') = 'instock'
                """,
                'description': '√çndice parcial para productos en stock'
            },
            
            # √çndice para categor√≠as
            {
                'name': 'idx_categories',
                'sql': """
                    CREATE INDEX IF NOT EXISTS idx_categories 
                    ON knowledge_base(title) 
                    WHERE content_type = 'category'
                """,
                'description': '√çndice para b√∫squeda r√°pida de categor√≠as'
            }
        ]
        
        print("\nüìä Creando/Verificando √≠ndices...")
        
        for index in indexes:
            try:
                print(f"\nüîß {index['name']}: {index['description']}")
                await conn.execute(index['sql'])
                print(f"   ‚úÖ √çndice creado/verificado exitosamente")
            except Exception as e:
                print(f"   ‚ö†Ô∏è Error con √≠ndice {index['name']}: {e}")
        
        # Actualizar estad√≠sticas de la tabla
        print("\nüìà Actualizando estad√≠sticas de la tabla...")
        await conn.execute("ANALYZE knowledge_base")
        print("   ‚úÖ Estad√≠sticas actualizadas")
        
        # Verificar √≠ndices existentes
        print("\nüìã √çndices actuales en knowledge_base:")
        existing_indexes = await conn.fetch("""
            SELECT 
                schemaname,
                tablename,
                indexname,
                indexdef
            FROM pg_indexes
            WHERE tablename = 'knowledge_base'
            ORDER BY indexname
        """)
        
        for idx in existing_indexes:
            print(f"   - {idx['indexname']}")
        
        # Obtener estad√≠sticas de la tabla
        stats = await conn.fetchrow("""
            SELECT 
                COUNT(*) as total_rows,
                COUNT(*) FILTER (WHERE content_type = 'product') as products,
                COUNT(*) FILTER (WHERE content_type = 'category') as categories,
                COUNT(*) FILTER (WHERE content_type = 'knowledge') as knowledge,
                pg_size_pretty(pg_total_relation_size('knowledge_base')) as table_size
            FROM knowledge_base
        """)
        
        print("\nüìä Estad√≠sticas de la tabla:")
        print(f"   Total de filas: {stats['total_rows']:,}")
        print(f"   Productos: {stats['products']:,}")
        print(f"   Categor√≠as: {stats['categories']:,}")
        print(f"   Knowledge: {stats['knowledge']:,}")
        print(f"   Tama√±o total: {stats['table_size']}")
        
        # Configurar par√°metros de rendimiento
        print("\n‚öôÔ∏è Configurando par√°metros de rendimiento...")
        
        # Estos comandos solo funcionan si el usuario tiene permisos
        try:
            await conn.execute("SET work_mem = '256MB'")
            await conn.execute("SET maintenance_work_mem = '512MB'")
            print("   ‚úÖ Par√°metros de memoria configurados")
        except:
            print("   ‚ö†Ô∏è No se pudieron configurar par√°metros de memoria (requiere permisos)")
        
        print("\n‚úÖ Optimizaci√≥n de √≠ndices completada")
        
        await conn.close()
        
    except Exception as e:
        print(f"‚ùå Error al optimizar √≠ndices: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(optimize_indexes())