#!/usr/bin/env python3
"""
Script simple para probar la conexi√≥n PostgreSQL
No requiere OpenAI API Key
"""

import asyncio
import sys
import os
from pathlib import Path

# Agregar el directorio ra√≠z al path
sys.path.append(str(Path(__file__).parent.parent))

import asyncpg
from config.settings import settings

async def test_postgres_connection():
    """Probar conexi√≥n b√°sica a PostgreSQL"""
    print("üêò Probando conexi√≥n a PostgreSQL...")
    
    try:
        # Conectar a PostgreSQL
        conn = await asyncpg.connect(settings.DATABASE_URL)
        print("‚úÖ Conexi√≥n a PostgreSQL exitosa")
        
        # Verificar extensi√≥n vector
        result = await conn.fetchval("SELECT EXISTS(SELECT 1 FROM pg_extension WHERE extname = 'vector')")
        if result:
            print("‚úÖ Extensi√≥n pgvector disponible")
        else:
            print("‚ö†Ô∏è  Extensi√≥n pgvector no encontrada, instalando...")
            await conn.execute("CREATE EXTENSION IF NOT EXISTS vector;")
            print("‚úÖ Extensi√≥n pgvector instalada")
        
        # Probar crear tabla b√°sica
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS test_table (
                id SERIAL PRIMARY KEY,
                name TEXT,
                embedding vector(3)
            );
        """)
        print("‚úÖ Tabla de prueba creada")
        
        # Insertar datos de prueba
        await conn.execute("""
            INSERT INTO test_table (name, embedding) 
            VALUES ('test', '[1,2,3]') 
            ON CONFLICT DO NOTHING;
        """)
        print("‚úÖ Datos de prueba insertados")
        
        # Consultar datos
        result = await conn.fetchrow("SELECT * FROM test_table LIMIT 1;")
        if result:
            print(f"‚úÖ Consulta exitosa: {dict(result)}")
        
        # Limpiar tabla de prueba
        await conn.execute("DROP TABLE IF EXISTS test_table;")
        print("‚úÖ Tabla de prueba eliminada")
        
        await conn.close()
        print("‚úÖ Conexi√≥n cerrada correctamente")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error: {e}")
        return False

async def main():
    print("üöÄ PRUEBA DE POSTGRESQL")
    print("=" * 40)
    
    try:
        success = await test_postgres_connection()
        
        if success:
            print("\nüéâ POSTGRESQL FUNCIONA CORRECTAMENTE")
            print("=" * 40)
            print("‚úÖ Extensi√≥n pgvector instalada")
            print("‚úÖ Conexi√≥n estable")
            print("‚úÖ Operaciones CRUD funcionando")
            print("\nüìã Siguiente paso:")
            print("   Configura tu OPENAI_API_KEY en el archivo .env")
            return True
        else:
            print("\n‚ùå POSTGRESQL NO FUNCIONA")
            return False
            
    except Exception as e:
        print(f"\n‚ùå Error durante la prueba: {e}")
        return False

if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1) 