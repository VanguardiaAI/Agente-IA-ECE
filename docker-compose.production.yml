version: '3.8'

services:
  # PostgreSQL con pgvector para producción
  postgres:
    image: pgvector/pgvector:pg14
    container_name: eva-postgres-prod
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-eva_db}
      POSTGRES_USER: ${POSTGRES_USER:-eva_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    ports:
      - "127.0.0.1:5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-eva_user} -d ${POSTGRES_DB:-eva_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - eva_network

  # Servidor MCP
  mcp-server:
    build:
      context: .
      dockerfile: Dockerfile
      target: mcp-server
    container_name: eva-mcp-prod
    restart: always
    env_file:
      - .env.production
    environment:
      - PYTHONUNBUFFERED=1
      - POSTGRES_HOST=postgres
      - PRODUCTION=true
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "8000:8000"
    volumes:
      - ./knowledge:/app/knowledge:ro
      - ./logs:/app/logs
    networks:
      - eva_network
    # MCP server doesn't have HTTP health endpoint
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3

  # Aplicación Web (FastAPI)
  web-app:
    build:
      context: .
      dockerfile: Dockerfile
      target: web-app
    container_name: eva-web-prod
    restart: always
    env_file:
      - .env.production
    environment:
      - PYTHONUNBUFFERED=1
      - POSTGRES_HOST=postgres
      - MCP_SERVER_URL=http://mcp-server:8000
      - PRODUCTION=true
      - WHATSAPP_WEBHOOK_URL=https://ia.elcorteelectrico.com/api/webhooks/whatsapp
      - CART_WEBHOOK_URL=https://ia.elcorteelectrico.com/webhook/cart-abandoned
    depends_on:
      - postgres
      - mcp-server
    ports:
      - "8080:8080"
    volumes:
      - ./knowledge:/app/knowledge:ro
      - ./templates:/app/templates:ro
      - ./static:/app/static:ro
      - ./logs:/app/logs
    networks:
      - eva_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx para reverse proxy y SSL
  nginx:
    image: nginx:alpine
    container_name: eva-nginx-prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.production.conf:/etc/nginx/nginx.conf:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - ./static:/usr/share/nginx/html/static:ro
      - nginx_cache:/var/cache/nginx
    depends_on:
      - web-app
      - mcp-server
    networks:
      - eva_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/nginx-health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis para caché y sesiones (opcional pero recomendado)
  redis:
    image: redis:7-alpine
    container_name: eva-redis-prod
    restart: always
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "127.0.0.1:6379:6379"
    networks:
      - eva_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backup service disabled - use cron job instead
  # backup:
  #   image: postgres:14-alpine
  #   container_name: eva-backup-prod
  #   restart: always
  #   environment:
  #     POSTGRES_HOST: postgres
  #     POSTGRES_DB: ${POSTGRES_DB:-eva_db}
  #     POSTGRES_USER: ${POSTGRES_USER:-eva_user}
  #     POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
  #     BACKUP_SCHEDULE: "0 2 * * *"  # 2 AM todos los días
  #   volumes:
  #     - ./backups:/backups
  #     - ./scripts/backup.sh:/backup.sh:ro
  #   entrypoint: ["/bin/sh", "-c"]
  #   command: |
  #     "while true; do
  #       echo 'Esperando próximo backup...'
  #       sleep 86400
  #       /backup.sh
  #     done"
  #   depends_on:
  #     - postgres
  #   networks:
  #     - eva_network

networks:
  eva_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  nginx_cache:
    driver: local